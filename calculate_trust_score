import pandas as pd
import numpy as np
import time
import psutil
from memory_profiler import memory_usage

# Trust Score 계산 함수
def calculate_trust_score(row, weights):
    B = row['B']
    N = row['N']
    D = row['D']
    T = row['T']
    return weights['B'] * B + weights['N'] * N + weights['D'] * D + weights['T'] * T

# 실험 함수
def run_experiment(df, weights):
    start_time = time.time()
    mem_usage = memory_usage((df.apply, (calculate_trust_score,), {'axis':1, 'weights':weights}))
    end_time = time.time()
    
    total_time = end_time - start_time
    avg_time = (total_time / len(df)) * 1000  # ms per row
    cpu_usage = psutil.cpu_percent(interval=1)
    memory = max(mem_usage)
    
    print(f"Data size: {len(df)} rows")
    print(f"Total time: {total_time:.2f} sec")
    print(f"Avg time per row: {avg_time:.3f} ms")
    print(f"CPU usage: {cpu_usage}%")
    print(f"Memory usage: {memory:.2f} MB")
    print(f"TPS: {len(df) / total_time:.0f} Trust Scores/sec")

# 예시 데이터 생성
def generate_synthetic_data(size):
    return pd.DataFrame({
        'B': np.random.uniform(0, 1, size),
        'N': np.random.uniform(0, 1, size),
        'D': np.random.uniform(0, 1, size),
        'T': np.random.uniform(0, 1, size),
    })

# 실행 예시
weights = {'B': 0.4, 'N': 0.3, 'D': 0.2, 'T': 0.1}
df_sample = generate_synthetic_data(100000)  # 100K rows
run_experiment(df_sample, weights)
